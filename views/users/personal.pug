extends menu
block block_visitors
    .tab-content.shadow-lg.p-3.mb-5.bg-white.rounded
        #visitorsTable
        hr
        #deselect-all.a.btn.btn-outline-info Отменить выбор
        span#select-stats(style='margin:20px 20px 0 20px; font-size: 1em;')
            strong
                | Выбрано:
                span.highlight 0
        #select-all.a.btn.btn-outline-danger Отменить участие выбраных
    script.
        var minMaxFilterEditor = function (cell, onRendered, success, cancel, editorParams) {
            var end;
            var container = document.createElement("span");
            var start = document.createElement("input");
            start.setAttribute("type", "number");
            start.setAttribute("placeholder", "Min");
            start.setAttribute("min", 0);
            start.setAttribute("max", 100);
            start.style.padding = "4px";
            start.style.width = "50%";
            start.style.boxSizing = "border-box";
            start.value = cell.getValue();

            function buildValues() {
                success({
                    start: start.value,
                    end: end.value,
                });
            }

            function keypress(e) {
                if (e.keyCode == 13) {
                    buildValues();
                }
                if (e.keyCode == 27) {
                    cancel();
                }
            }

            end = start.cloneNode();
            start.addEventListener("change", buildValues);
            start.addEventListener("blur", buildValues);
            start.addEventListener("keydown", keypress);
            end.addEventListener("change", buildValues);
            end.addEventListener("blur", buildValues);
            end.addEventListener("keydown", keypress);
            container.appendChild(start);
            container.appendChild(end);
            return container;
        }

        function minMaxFilterFunction(headerValue, rowValue, rowData, filterParams) {
            //headerValue - the value of the header filter element
            //rowValue - the value of the column in this row
            //rowData - the data for the row being filtered
            //filterParams - params object passed to the headerFilterFuncParams property

            if (rowValue) {
                if (headerValue.start != "") {
                    if (headerValue.end != "") {
                        return rowValue >= headerValue.start && rowValue <= headerValue.end;
                    } else {
                        return rowValue >= headerValue.start;
                    }
                } else {
                    if (headerValue.end != "") {
                        return rowValue <= headerValue.end;
                    }
                }
            }

            return false;
        }

        var dateEditor = function (cell, onRendered, success, cancel) {
            //cell - the cell component for the editable cell
            //onRendered - function to call when the editor has been rendered
            //success - function to call to pass the successfuly updated value to Tabulator
            //cancel - function to call to abort the edit and return to a normal cell

            //create and style input
            var cellValue = moment(cell.getValue(), "DD/MM/YYYY").format("YYYY-MM-DD"),
                input = document.createElement("input");

            input.setAttribute("type", "date");

            input.style.padding = "4px";
            input.style.width = "100%";
            input.style.boxSizing = "border-box";

            input.value = cellValue;

            onRendered(function () {
                input.focus();
                input.style.height = "100%";
            });

            function onChange() {
                if (input.value != cellValue) {
                    success(moment(input.value, "YYYY-MM-DD").format("DD/MM/YYYY"));
                } else {
                    cancel();
                }
            }

            //submit new value on blur or change
            input.addEventListener("change", onChange);
            input.addEventListener("blur", onChange);

            //submit new value on enter
            input.addEventListener("keydown", function (e) {
                if (e.keyCode == 13) {
                    onChange();
                }

                if (e.keyCode == 27) {
                    cancel();
                }
            });

            return input;
        };

        //create autocomplete editor (example of using jquery code to create an editor)
        var autocompEditor = function (cell, onRendered, success, cancel) {
            //create and style input
            var input = $("<input type='text'/>");

            //setup jquery autocomplete
            input.autocomplete({
                source: ["United Kingdom", "Germany", "France", "USA", "Canada", "Russia", "India", "China", "South Korea", "Japan"]
            });

            input.css({
                "padding": "4px",
                "width": "100%",
                "box-sizing": "border-box",
            })
                .val(cell.getValue());

            onRendered(function () {
                input.focus();
                input.css("height", "100%");
            });

            //submit new value on blur
            input.on("change blur", function (e) {
                if (input.val() != cell.getValue()) {
                    success(input.val());
                } else {
                    cancel();
                }
            });

            //submit new value on enter
            input.on("keydown", function (e) {
                if (e.keyCode == 13) {
                    success(input.val());
                }

                if (e.keyCode == 27) {
                    cancel();
                }
            });

            return input[0];
        };
        var table = new Tabulator("#visitorsTable", {
            height: window.innerHeight - 256,
            layout: "fitColumns",
            movableRows: true,
            groupBy: "event",
            selectable: true,
            headerFilterPlaceholder: "Фильтр...",
            columns: [ //Define Table Columns
                {title: "Имя и фамилия", field: "name", headerFilter: "input",},
                {title: "e-mail", field: "email", headerFilter: "input"},
                {title: "Событие", field: "event", headerFilter: "input"},
                {title: "Дата события", field: "dateEvent", sorter: "date", align: "center", headerFilter: "input"},
                {title: "Время события", field: "timeEvent", sorter: "time", align: "center", headerFilter: "input"},
                {title: "Дата подписки", field: "dateSign", sorter: "date", align: "center", headerFilter: "input"},
                {title: "Время подписки", field: "timeSign", sorter: "time", align: "center", headerFilter: "input"},
            ],
            rowSelectionChanged: function (data, rows) {
                //update selected row counter on selection change
                $("#select-stats span").text(data.length);
                console.log(table.getSelectedRows());
            },
            // rowClick: function (e, row) { //trigger an alert message when the row is clicked
            //     alert("Row " + row.getData().id + " Clicked!!!!");
            // }
        });


        //select row on "select all" button click
        $("#select-all").click(function () {
            table.selectRow();
        });

        //deselect row on "deselect all" button click
        $("#deselect-all").click(function () {
            table.deselectRow();
        });
        var testtabledata = [
            {
                id: 1,
                name: "Oli Bob",
                email: "email",
                event: "Екзамен взрос",
                dateEvent: "14/12/2018",
                timeEvent: "11:00",
                dateSign: "4/12/2018",
                timeSign: "10:23"
            },
            {
                id: 3,
                name: " Bob",
                email: "email",
                event: "[7-11 лет] Вступительный тест",
                dateEvent: "15/12/2018",
                timeEvent: "12:00",
                dateSign: "5/12/2018",
                timeSign: "11:23"
            },
            {
                id: 4,
                name: "Oli",
                email: "email",
                event: "event",
                dateEvent: "16/12/2018",
                timeEvent: "10:00",
                dateSign: "4/12/2018",
                timeSign: "10:23"
            },

            {
                id: 10,
                name: "Jek",
                email: "email",
                event: "[7-11 лет] Вступительный тест",
                dateEvent: "14/12/2018",
                timeEvent: "11:00",
                dateSign: "4/12/2018",
                timeSign: "10:23"
            },

        ];
        table.setData(testtabledata);

block block_patterns
    .tab-content.shadow-lg.p-3.mb-5.bg-white.rounded
        #path
        row
            #editor.json-editor
            textarea#json

    script.
        var testjson = {
            "users": {
                "shpp": {
                    "toplevel": {
                        "title": "Школа программирования Ш++",
                        "description": "Добро пожаловать! Выберите, пожалуйста, удобную для вас дату и время",
                        "endmessage": "Спасибо за регистрацию!"
                    },
                    "timezone": "GMT+3",
                    "types": {
                        "grownups": {
                            "path": "exam",
                            "color": "#00ffff",
                            "rangeDays": 15,
                            "canCancel": true,
                            "cancellationPolicy": "...",
                            "XredirectOnConfirmation": "http://....",
                            "XwebhookUrl": "http://....{{}}",
                            "enabled": true,
                            "secret": false,
                            "form": {
                                "fields": [
                                    {
                                        "type": "text",
                                        "label": "Имя И фамилия",
                                        "regex": ".+ .+",
                                        "minLen": 5
                                    },
                                    {
                                        "type": "text",
                                        "label": "email",
                                        "regex": ".*@.*\\..*"
                                    }
                                ]
                            },
                            "title": "[7-11 лет] Вступительный тест",
                            "location": "Ш++, г. Кропивницкий, пер. Васильевский, 5 этаж",
                            "description": "Обязательно указывайте электронный адрес, с которым вы регистрировались на портале. Будьте внимательны — записаться можно только один раз",
                            "durationMinutes": 120,
                            "concurrentVisitors": 2,
                            "override": {
                                "exactday": {
                                    "2018.11.11": {
                                        "slots": []
                                    },
                                    "2018.11.12": {
                                        "reuse": "2018.11.11"
                                    }
                                }
                            },
                            "recurring": {
                                "weekly": {
                                    "days": [
                                        {
                                            "slots": [
                                                {
                                                    "time": "10:00"
                                                },
                                                {
                                                    "time": "11:00"
                                                },
                                                {
                                                    "time": "12:00"
                                                },
                                                {
                                                    "time": "13:00"
                                                },
                                                {
                                                    "time": "14:00"
                                                },
                                                {
                                                    "time": "15:00"
                                                },
                                                {
                                                    "time": "16:00"
                                                },
                                                {
                                                    "time": "17:00"
                                                }
                                            ]
                                        },
                                        {
                                            "reuse": 0
                                        },
                                        {
                                            "reuse": 0
                                        },
                                        {
                                            "reuse": 0
                                        },
                                        {
                                            "reuse": 0
                                        },
                                        {
                                            "slots": [
                                                {
                                                    "time": "11:00"
                                                },
                                                {
                                                    "time": "12:00"
                                                },
                                                {
                                                    "time": "13:00"
                                                },
                                                {
                                                    "time": "14:00"
                                                },
                                                {
                                                    "time": "15:00"
                                                },
                                                {
                                                    "time": "16:00"
                                                }
                                            ]
                                        },
                                        {}
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        };
        function printJSON() {
            $('#json').val(JSON.stringify(json));
        }
        function updateJSON(data) {
            json = data;
            printJSON();
        }
        function showPath(path) {
            $('#path').text(path);
        }
        $(document).ready(function () {
            $('#json').change(function () {
                var val = $('#json').val();
                if (val) {
                    try {
                        json = JSON.parse(val);
                    }
                    catch (e) {
                        alert('Error in parsing json. ' + e);
                    }
                } else {
                    json = {};
                }
                $('#editor').jsonEditor(testjson, {change: updateJSON, propertyclick: showPath});
            });
            printJSON();
            $('#editor').jsonEditor(testjson, {change: updateJSON, propertyclick: showPath});
        });
